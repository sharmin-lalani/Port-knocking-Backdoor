Program description:

Backdoor:

Parsing command line arguments:
I am storing the port knocking sequence read the config file in a vector.
For the URL, I am parsing it to extract the host, port number and page to be fetched.
(The parsing logic can only handle the http protocol.
Eg. http://127.0.0.1:80/dummy.html)

Creating a Raw socket:
We Need to use raw sockets for this program. 
Stream sockets and data gram sockets receive data from the transport layer that contains no headers but only the payload.  
A raw socket allows an application to directly access lower level protocols, which means a raw socket receives un-extracted packets.

Packet processing: 
I am extracting the source and destination ip addresses and port numbers from each packet.
(I have handled both TCP as well as UDP packets.)

Each unique client request can be identified by:
1. Source IP
2. Source Port
3. Dest IP

So, If two requests have the same source IP, but different source ports, 
they are considered as separate knockers. The machine running the backdoor can have multiple IP addresses,
thus if a knocker sends packets to different destination IPs, again they are considered as separate knockers. 

I am mapping each client request to a destination port.
After every 'knock' attempt by a client, I am updating the index of the next expected dport by looking up the port knocking sequence.
If the sequence so far has been correct, I increment the index.
Whenever the sequence is broken, I reset the next expected port index to 0.
Since we are storing the port index instead of the port number, 
the backdoor works correctly if the same port number is repeated in the sequence.

Whenever a client sends packets in the correct order that match the port-knocking sequence, 
a GET request is made to the specified URL, and the fetched linux command is executed in the local system.

Knocker:

I am binding the client socket to use the same source port for every packet,
and sending UDP packets to the specified IP, with dest port numbers read from the config file.
I have introduced a delay of 100ms between successive packets to decrease the odds of out-of-sequence delivery.


References:
http://www.binarytides.com/packet-sniffer-code-in-c-using-linux-sockets-bsd-part-2/
http://www.binarytides.com/raw-sockets-c-code-linux/
http://cboard.cprogramming.com/c-programming/142841-sending-http-get-request-c.html
https://www.cs.cmu.edu/afs/cs/academic/class/15213-f99/www/class26/udpclient.c
